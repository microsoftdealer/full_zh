import datetime
import json

from aiogram import types
from aiogram.dispatcher import FSMContext
import asyncio

from aiogram.types import InputFile, ContentType

from keyboards.inline.levels import levels_kb
from keyboards.inline.menu import menu_kb, cancel_kb
from keyboards.inline.rad_manage import delete_kb
from keyboards.inline.rad_manage_cd import rad_remove_cd
from states.rad import FZH

from loader import dp
from utils.db_api.commands import new_rad, check_this_month, delete_rad
from utils.full_zh_maker import full_zh_gen
from utils.misc.analyzer import analyze


@dp.callback_query_handler(text='cancel', state='*')
async def cancel_all(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer(text='–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...')
    await asyncio.sleep(2)
    await state.finish()
    await call.message.answer(text='–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.', reply_markup=menu_kb)


@dp.callback_query_handler(rad_remove_cd.filter())
async def remake(call: types.CallbackQuery):
    data = call.data
    id_to_remove = data.split(':')
    id_to_remove = id_to_remove[-1]
    await delete_rad(int(id_to_remove))
    await call.message.answer('–£–¥–∞–ª–µ–Ω–æ. –ñ–º–∏ /wheel —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–Ω–æ–≤–æ.')


@dp.callback_query_handler(text='wheel', state='*')
async def create_full_wheel(call: types.CallbackQuery):
    date = datetime.date.today()
    year = date.year
    month = str(date.month)
    print(year)
    print(month)
    print(type(month))
    print(type(year))

    check = await check_this_month(call.from_user.id, month, year)
    print(check)
    if check:
        await call.message.answer(text='–í –º–µ—Å—è—Ü –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–π —à—Ç—É–∫–∏!\n'
                                       '–¢—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ, –≤–æ—Ç –∏ –ö–æ–ª–µ—Å–æ, –∫—Å—Ç–∞—Ç–∏!')
        await call.message.answer_photo(photo=check.photo_id)
        await call.message.answer(text='–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ - –∂–º–∏ –∫–Ω–æ–ø–∫—É.', reply_markup=delete_kb(check.id))
        return
    await call.message.answer('–û–∫–∏-–¥–æ–∫–∏, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —Ç–µ–±–µ "–ö–æ–ª–µ—Å–æ –∂–∏–∑–Ω–∏"\n'
                              '–ü–æ–∫–∞ –º—ã –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –∏ —Ç—ã –¥–∞–∂–µ'
                              ' —Å–º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é.\n'
                              '–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ - –ø—Ä–æ—á–∏—Ç–∞–π –∫—Ä–∞—Ç–∫–∏–π –º–∞–Ω—É–∞–ª - /help\n'
                              '–ü–æ–≥–Ω–∞–ª–∏!')
    await asyncio.sleep(1)
    await call.message.answer('–û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –ª—é–±–≤–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10', reply_markup=levels_kb())
    await FZH.Love.set()


@dp.message_handler(commands='wheel', state='*')
async def create_full_zh(message: types.Message, state: FSMContext):
    await state.finish()
    date = datetime.date.today()
    year = date.year
    month = str(date.month)
    check = await check_this_month(message.from_user.id, month, year)
    print(year)
    print(month)
    print(type(month))
    print(type(year))
    if check:
        await message.answer(text='–í –º–µ—Å—è—Ü –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–π —à—Ç—É–∫–∏!\n'
                                  '–¢—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ, –≤–æ—Ç –∏ –ö–æ–ª–µ—Å–æ, –∫—Å—Ç–∞—Ç–∏!')
        await message.answer_photo(photo=check.photo_id)
        await message.answer(text='–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ - –∂–º–∏ –∫–Ω–æ–ø–∫—É.', reply_markup=delete_kb(check.id))
        return
    await message.answer('–û–∫–∏-–¥–æ–∫–∏, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —Ç–µ–±–µ "–ö–æ–ª–µ—Å–æ –∂–∏–∑–Ω–∏"\n'
                         '–ü–æ–∫–∞ –º—ã –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –∏ —Ç—ã –¥–∞–∂–µ'
                         ' —Å–º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é.\n'
                         '–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ - –ø—Ä–æ—á–∏—Ç–∞–π –∫—Ä–∞—Ç–∫–∏–π –º–∞–Ω—É–∞–ª - /help\n'
                         '–ü–æ–≥–Ω–∞–ª–∏!')
    await asyncio.sleep(1)
    await message.answer('üíû –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –ª—é–±–≤–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10', reply_markup=levels_kb())
    await FZH.Love.set()


@dp.callback_query_handler(text='back', state='*')
@dp.callback_query_handler(state=FZH.Love)
@dp.callback_query_handler(state=FZH.Money)
@dp.callback_query_handler(state=FZH.Friends)
@dp.callback_query_handler(state=FZH.Health)
@dp.callback_query_handler(state=FZH.Hobby)
@dp.callback_query_handler(state=FZH.Job)
async def write_down_full_zh(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    lvl = call.data
    if lvl == 'back':
        await FZH.previous()
        await FZH.previous()
        cur_state = await state.get_state()
        if not cur_state:
            await FZH.First.set()

    cur_state = await state.get_state()
    if cur_state == 'FZH:First':
        await call.message.answer('üíû –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –ª—é–±–≤–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10', reply_markup=levels_kb())
        await FZH.Love.set()
        return
    if cur_state == 'FZH:Love':
        await state.update_data(love=lvl) if lvl != 'back' else print('')
        await call.message.answer('üí∞ –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10', reply_markup=levels_kb())
        await FZH.Money.set()
        return
    if cur_state == 'FZH:Money':
        await state.update_data(money=lvl) if lvl != 'back' else print('')
        await call.message.answer('üèê –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –¥—Ä—É–∂–±—ã –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10', reply_markup=levels_kb())
        await FZH.Friends.set()
        return
    if cur_state == 'FZH:Friends':
        await state.update_data(friends=lvl) if lvl != 'back' else print('')
        await call.message.answer('üè• –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤—å—è –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10', reply_markup=levels_kb())
        await FZH.Health.set()
        return
    if cur_state == 'FZH:Health':
        await state.update_data(health=lvl) if lvl != 'back' else print('')
        await call.message.answer('üéø –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å —Ö–æ–±–±–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10', reply_markup=levels_kb())
        await FZH.Hobby.set()
        return
    if cur_state == 'FZH:Hobby':
        await state.update_data(hobby=lvl) if lvl != 'back' else print('')
        await call.message.answer('üî® –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å —Ä–∞–±–æ—Ç—ã –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10', reply_markup=levels_kb())
        await FZH.Job.set()
        return
    if cur_state == 'FZH:Job':
        await state.update_data(job=lvl)
    data = await state.get_data()
    love = data.get('love')
    money = data.get('money')
    friends = data.get('friends')
    health = data.get('health')
    hobby = data.get('hobby')
    job = data.get('job')
    df_dict = {
        'love': love,
        'money': money,
        'friends': friends,
        'health': health,
        'hobby': hobby,
        'job': job
    }
    await call.message.answer(text='–°–µ–π—á–∞—Å —Å–¥–µ–ª–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É, –º–æ–º–µ–Ω—Ç...')
    filename = full_zh_gen(df_dict)
    photo = InputFile(path_or_bytesio=filename)
    photo = await call.message.answer_photo(photo=photo, caption='–ì–æ—Ç–æ–≤–æ, –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å.')
    photo_id = photo.photo[-1].file_id
    await state.finish()
    date = datetime.date.today()
    year = date.year
    month = str(date.month)
    await new_rad(call.from_user.id, year, month, photo_id, json.dumps(df_dict))
    analysis = analyze(df_dict)
    await call.message.answer(analysis)


@dp.callback_query_handler(text='cancel', state='*')
async def cancel_all(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    msg = await call.message.answer(text='–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...')
    await asyncio.sleep(2)
    await state.finish()
    await call.message.answer(text='–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.', reply_markup=menu_kb)
